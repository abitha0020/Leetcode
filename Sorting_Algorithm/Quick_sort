def partition(arr, low, high):
    # Choose the rightmost element as the pivot
    pivot = arr[high]
    i = low - 1  # Pointer for the smaller element
    
    # Rearrange the array so that elements smaller than pivot are on the left,
    # and elements larger than pivot are on the right
    for j in range(low, high):
        if arr[j] < pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]  # Swap elements
            
    # Swap the pivot element with the element at i + 1 position
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1  # Return the partitioning index

def quick_sort(arr, low, high):
    if low < high:
        # Find the pivot element such that elements smaller than pivot are on the left,
        # and elements greater than pivot are on the right
        pi = partition(arr, low, high)
        
        # Recursively sort elements before and after partition
        quick_sort(arr, low, pi - 1)
        quick_sort(arr, pi + 1, high)

# Example usage:
arr = [10, 7, 8, 9, 1, 5]
n = len(arr)
print("Original array:", arr)

quick_sort(arr, 0, n - 1)
print("Sorted array:", arr)
